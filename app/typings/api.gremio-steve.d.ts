/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/users": {
    /** Obtains a list of users, searching based on username */
    get: operations["searchUsers"];
  };
  "/journeys": {
    /** Search a list of journeys based on a string */
    get: operations["searchJourneys"];
    /** Create a new journey */
    post: operations["createOneJourney"];
  };
  "/journeys/mine": {
    /** Get the journeys that were organized by the current user */
    get: operations["getMyJourneys"];
  };
  "/journeys/:id": {
    /** Find one journey based on ID */
    get: operations["getOneJourneyById"];
    /** Delete a journey based on id */
    delete: operations["deleteOneJourneyById"];
  };
}

export interface definitions {
  "User.Preferences": {
    std?: boolean;
    taiko?: boolean;
    ctb?: boolean;
    mania?: boolean;
  };
  "User.Availability": {
    mods?: boolean;
    guest_diffs?: boolean;
    playtesting?: boolean;
  };
  "Journey.Metadata": {
    genre: string;
    /** Represents a range of BPM that the song has */
    bpm: number[];
    /** ISO String of closure date */
    closure?: string;
    duration?: number;
  };
  "Journey.Beatmap": {
    id?: string;
    name: string;
    mode: "std" | "taiko" | "ctb" | "mania";
    difficulty: "easy" | "normal" | "hard" | "insane" | "expert" | "expert+";
    status?: "ready" | "pending" | "alert" | "problem";
    assignee?: definitions["User"];
  };
  Journey: {
    id?: string;
    title: string;
    artist: string;
    organizer: definitions["User"];
    thumbnail_url: string;
    banner_url: string;
    metadata?: definitions["Journey.Metadata"];
    modes?: "std" | "taiko" | "ctb" | "mania";
    description?: string;
    status?: "pending" | "open" | "ready" | "alert" | "problem" | "closed";
    is_private?: boolean;
    beatmaps?: definitions["Journey.Beatmap"][];
    osu_link?: string;
  };
  User: {
    /** User's id (read only) */
    id?: string;
    /** Ous user's id (read only) */
    osu_id?: string;
    name: string;
    active?: boolean;
    avatar_url: string;
    banner_url: string;
    availability: definitions["User.Availability"];
    journeys?: definitions["Journey"][];
    community_role: string;
    role: "admin" | "user" | "moderator";
    preferences: definitions["User.Preferences"];
    status: "available" | "do_not_disturb";
    description?: string;
    queue?: definitions["Journey"][];
  };
}

export interface operations {
  /** Obtains a list of users, searching based on username */
  searchUsers: {
    parameters: {
      query: {
        /** Can be the username */
        search?: unknown;
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["User"][];
      };
    };
  };
  /** Search a list of journeys based on a string */
  searchJourneys: {
    parameters: {
      query: {
        search?: unknown;
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["Journey"][];
      };
    };
  };
  /** Create a new journey */
  createOneJourney: {
    parameters: {
      body: {
        body?: definitions["Journey"];
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["Journey"];
      };
    };
  };
  /** Get the journeys that were organized by the current user */
  getMyJourneys: {
    responses: {
      /** Success */
      200: {
        schema: definitions["Journey"][];
      };
    };
  };
  /** Find one journey based on ID */
  getOneJourneyById: {
    parameters: {
      path: {
        id?: unknown;
      };
    };
    responses: {
      /** Success */
      200: {
        schema: definitions["Journey"];
      };
      /** Client error and Not Found */
      404: unknown;
    };
  };
  /** Delete a journey based on id */
  deleteOneJourneyById: {
    parameters: {
      path: {
        /** Journey's id */
        id?: unknown;
      };
    };
    responses: {
      /** The journey was deleted succesfully */
      200: unknown;
      /** User is not authenticated */
      401: unknown;
      /** User cannot perform action */
      403: unknown;
      /** The journey could not be found */
      404: unknown;
    };
  };
}
